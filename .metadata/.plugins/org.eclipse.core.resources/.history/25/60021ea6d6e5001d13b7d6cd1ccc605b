<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@page import="net.etfbl.dto.User"%>
<%@page import="net.etfbl.beans.UserBean"%>
<%@page import="java.util.List"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.Map"%>
<%@page import="java.util.Comparator"%>
<%@page import="net.etfbl.mq.Message"%>
<%@page import="java.time.format.DateTimeFormatter"%>
<jsp:useBean id="userBean" type="net.etfbl.beans.UserBean"
	scope="session" />
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link href="styles/style.css" type="text/css" rel="stylesheet">
<title>Messaging App</title>
</head>
<body>
	<h1>ETF Anonymous Messaging App</h1>
	<a href="?action=logout">Odjava sa sistema</a>
	<hr />
	<div class="container">
		<div class="users-list">
			<h2>Users</h2>
			<ul>
				<%
				for (User user : userBean.getAll()) {
				%>
				<li><a
					href="?action=recipientSelected&recipientId=<%=user.getId()%>"><%=user.getUsername()%></a></li>
				<%
				}
				%>
			</ul>
		</div>
		<div class="chat-area">
			<h2>Chat</h2>
			<div class="messages">
				<%
				Map<Integer, List<Message>> allMessages = (Map<Integer, List<Message>>) request.getSession().getAttribute("messages");

				List<Message> messages = new ArrayList<>();
				if (allMessages != null && userBean.getRecipient() != null) {
				    List<Message> receivedMessages = allMessages.get(userBean.getRecipient().getId());
				    if (receivedMessages != null) {
				        messages.addAll(receivedMessages);
				    }
				    List<Message> sentMessages = allMessages.get(userBean.getUser().getId());
				    if (sentMessages != null) {
				        messages.addAll(sentMessages);
				    }
				}

				messages.sort(Comparator.comparing(Message::getTimeSent));
				if (!messages.isEmpty()) {
				    for (Message message : messages) {

				%>
				<div
					class="message <%=message.getSenderUsername().equals(userBean.getUser().getUsername()) ? "sent" : "received"%>">
					<p class="sender-info"><%=message.getSenderUsername()%>
						<span class="time-sent"><%=message.getTimeSent().format(DateTimeFormatter.ofPattern("HH:mm"))%></span>
					</p>
					<p class="message-text"><%=message.getMessageText()%></p>
				</div>
				<%
				}
				}
				
				%>

			</div>

			<div class="input-section">
				<form action="?action=sendMessage" method="post">
					<input type="text" name="message"
						placeholder="Type your message..." style="width: 100%;">
					<button type="submit">Send</button>
				</form>
			</div>
		</div>
	</div>
	<script>
	function updateMessages() {
	    let xhr = new XMLHttpRequest();
	    xhr.onreadystatechange = function() {
	        if (xhr.readyState == 4 && xhr.status == 200) {
	            let messages = JSON.parse(xhr.responseText);
	            console.log("Fetched messages:", messages); // Add this line for debugging
	            let messagesElement = document.querySelector(".messages");
	            messagesElement.innerHTML = "";

	            messages.sort((a, b) => {
	                let dateA = new Date(a.timeSent);
	                let dateB = new Date(b.timeSent);
	                return dateA - dateB;
	            });

	            for (let message of messages) {
	                let messageElement = document.createElement("div");
	                messageElement.className = "message " + (message.senderUsername === '<%=userBean.getUser().getUsername()%>' ? "sent" : "received");
	                let timeSent = new Date(message.timeSent).toLocaleString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
	                messageElement.innerHTML = `<p class="message-sender">${message.senderUsername} <span class="message-time">(${timeSent})</span></p><p class="message-text">${message.messageText}</p>`;
	                console.log("Message element:", messageElement); // Add this line for debugging
	                messagesElement.appendChild(messageElement);
	            }
	        }
	    };

	    xhr.open("GET", "Controller?action=fetchMessages", true);
	    xhr.send();
	}

	setInterval(updateMessages, 2000); // Poll every 2 seconds


</script>

</body>
</html>
